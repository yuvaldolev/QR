name: CI/CD

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 3 * * *"
  workflow_dispatch:

env:
  AWS_REGION: eu-central-1
  STACK_BASE_NAME: "QrBackendStack"
  ENCODE_API_URL_OUTPUT_KEY: "encodeApiUrl"

permissions:
  id-token: write
  contents: read

jobs:
  build-deploy-backend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: latest

      - name: Install AWS CLI
        uses: unfor19/install-aws-cli-action@v1

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install Zig toolchain
        uses: korandoru/setup-zig@v1
        with:
          zig-version: 0.10.0

      - name: Install Cargo Lambda
        uses: jaxxstorm/action-install-gh-release@v1.9.0
        with:
          repo: cargo-lambda/cargo-lambda
          platform: linux
          arch: x86_64

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          role-session-name: GitHub_to_AWS_via_FederatedOIDC
          aws-region: ${{ env.AWS_REGION }}

      - name: Install Infrastructure Dependencies
        run: npm ci

      - name: Determine Stack Name
        run: |
          if [[ "schedule" == github.event_name || "workflow_dispatch" == github.event_name ]]; then
            STACK_NAME="${{ env.STACK_BASE_NAME }}-prod"
          else
            STACK_NAME="${{ env.STACK_BASE_NAME }}-stage"
          fi
          echo "STACK_NAME=$STACK_NAME" >> $GITHUB_ENV

      - name: Deploy Backend
        run: npm run deploy ${{ env.STACK_NAME }} -- --require-approval never

      - name: Retrieve QR Encode API URL
        run: |
          ENCODE_API_URL=$(aws cloudformation describe-stacks ${{ env.STACK_NAME }} | jq '.Stacks[0].Outputs | .[] | select(.OutputKey == "${{ env.ENCODE_API_URL_OUTPUT_KEY }}") | .OutputValue')
          echo "ENCODE_API_URL=$ENCODE_API_URL" >> $GITHUB_ENV

      - name: Print QR Encode API URL
        run: echo "QR encode API URL - ${{ env.ENCODE_API_URL }}"
      
      - name: Save QR Encode API URL
        run: echo "${{ env.ENCODE_API_URL }}" > encode_api_url.txt

      - name: Upload QR Encode API URL
        uses: actions/upload-artifact@v4
        with:
          name: qr_encode_api_url
          path: encode_api_url.txt

  build-upload-frontend:
    needs: build-deploy-backend

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Determine OS Name
        run: |
          if [[ ${{ matrix.os }} == 'ubuntu-latest' ]]; then
            OS_NAME=linux
          elif [[ ${{ matrix.os }} == 'macos-latest' ]]; then
            OS_NAME=macos
          fi
          echo "OS_NAME=$OS_NAME" >> $GITHUB_ENV

      - name: Download QR Encode API URL
        uses: actions/download-artifact@v4
        with:
          name: qr_encode_api_url

      - name: Read Encode API URL into environment
        run: |
          ENCODE_API_URL=$(cat encode_api_url.txt)
          echo "ENCODE_API_URL=$ENCODE_API_URL" >> $GITHUB_ENV

      - name: Build CLI Frontend
        env:
          ENCODE_API_URL: ${{ env.ENCODE_API_URL }}
        run: cargo build -p qr_cli --release

      - name: Prepare CLI Frontend for Upload
        run: cp target/release/qr_cli qr_cli_${{ env.OS_NAME }}

      - name: Upload CLI Frontend Artifact
        uses: actions/upload-artifact@v4
        with:
          name: qr_cli_${{ env.OS_NAME }}
          path: qr_cli_${{ env.OS_NAME }}

  release:
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'

    needs: build-upload-frontend

    runs-on: ubuntu-latest

    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Download QR CLI Frontend Artifacts
        uses: actions/download-artifact@v4
        with:
          path: qr_cli
          pattern: qr_cli_*
          merge-multiple: true

      - name: Determine Release Name
        run: |
          RELEASE_NAME=$(date +'%Y%m%d').$(git rev-parse --short ${{ github.sha }}).${{ github.run_number }}
          echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.RELEASE_NAME }}
          files: |
            qr_cli/qr_cli_linux
            qr_cli/qr_cli_macos


